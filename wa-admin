#!/usr/bin/env bash 

#
# Copyright (c) 2011  Marin Atanasov Nikolov  <dnaeon@gmail.com>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#

# 
# wa-admin - a tool for managing multiple webalizer log files
# 

BASENAME=/usr/bin/basename
BC=/usr/bin/bc
CAT=/bin/cat
CUT=/usr/bin/cut
CP=/bin/cp
DATE=/bin/date
GNUPLOT=/usr/local/bin/gnuplot
GREP=/usr/bin/grep
JOT=/usr/bin/jot
MKDIR=/bin/mkdir
PRINTF=/usr/bin/printf
RM=/bin/rm
SED=/usr/bin/sed
SORT=/usr/bin/sort

wa_admin_prefix=/usr/local
wa_admin_etc=${wa_admin_prefix}/etc/wa-admin
wa_admin_vhosts=${wa_admin_etc}/wa-admin.vhosts
wa_admin_version="0.1"
wa_admin=$( ${BASENAME} $0 )

# read configuration file if present
[ -f "${wa_admin_etc}/wa-admin.conf" ] && . "${wa_admin_etc}/wa-admin.conf"

# set default variable values
: ${wa_admin_doc_root="${wa_admin_prefix}/www/wa-admin"}
: ${wa_admin_conf_template="${wa_admin_etc}/webalizer.conf.tpl"}
: ${wa_admin_html_header="${wa_admin_etc}/header.html"}
: ${wa_admin_html_footer="${wa_admin_etc}/footer.html"}
: ${wa_admin_hist="${wa_admin_doc_root}/wa-admin.hist"}
: ${wa_admin_font_path="/usr/local/lib/X11/fonts/webfonts/arialbd.ttf"}
: ${wa_admin_font_size="10"}
: ${wa_admin_stats_size="800,600"}
: ${webalizer_bin="${wa_admin_prefix}/bin/webalizer"}
: ${webalizer_hist="webalizer.hist"}
: ${webalizer_dnscache="dnscache.db"}

# usage messages
wa_admin_usage_top="==>> ${wa_admin} -- version ${wa_admin_version}"
wa_admin_usage="${wa_admin_usage_top}\n==>> Usage: ${wa_admin} [list|add|delete|run-cron|create-index]\n==>> For more information of the commands run ${wa_admin} help [command]."
wa_admin_usage_list="${wa_admin_usage_top}\n==>> Usage: ${wa_admin} list\n==>> Lists the currently added to wa-admin log files."
wa_admin_usage_run_cron="${wa_admin_usage_top}\n==>> Usage: ${wa_admin} run|cron\n==>> Runs webalizer for all added to wa-admin log files. Suitable for running from cron(8)."
wa_admin_usage_create_index="${wa_admin_usage_top}\n==>> Usage: ${wa_admin} create-index\n==>> Re-creates the index.html file for all added to wa-admin vhosts."
wa_admin_usage_add="${wa_admin_usage_top}\n==>> Usage: ${wa_admin} add <hostname> <log-file>\n==>> Adds new log file to wa-admin."
wa_admin_usage_delete="${wa_admin_usage_top}\n==>> Usage: ${wa_admin} delete <hostname> <log-file>\n==>> Deletes the log file for the specified host."

#
# Function definitions
#

# 
# errmsg()
# Prints an error message and exists
#

function errmsg() { echo -e "$*" >&2 && exit 1 ; }

# 
# warnmsg()
# Prints a warning message
#

function warnmsg() { echo -e "$*" >&2 ; } 

# 
# sanity_check()
# Performs a sanity check for the required files/directories
#

function sanity_check() {
   [ ! -d ${wa_admin_etc} ] && warnmsg "==>> Configuration directory ${wa_admin_etc} does not exists."
   [ ! -d ${wa_admin_doc_root} ] && warnmsg "==>> Document Root directory ${wa_admin_doc_root} exists."
   [ ! -f ${wa_admin_vhosts} ] && warnmsg "==>> Vhosts file ${wa_admin_vhosts} does not exists."
   [ ! -f ${wa_admin_conf_template} ] && warnmsg "==>> Webalizer template ${wa_admin_conf_template} does not exists."
   [ ! -f ${wa_admin_html_header} ] && warnmsg "==>> HTML header file ${wa_admin_html_header} does not exists."
   [ ! -f ${wa_admin_html_footer} ] && warnmsg "==>> HTML footer file ${wa_admin_html_footer} does not exists."
   [ ! -f ${webalizer_bin} ] && warnmsg "==>> Webalizer executable was not found in ${webalizer_bin}."
   [ ! -f ${GNUPLOT} ] && warnmsg "==>> gnuplot executable was not found in ${GNUPLOT}."
}

#
# wa_admin_list()
# Lists the currently added to webalizer vhosts and log files
#

function wa_admin_list() {

   ${PRINTF} "%-4s %-30s %-30s\n" Rank Hostname LogFile
   echo	     "---- ------------------------------ ------------------------------"

   rank=0

   # read wa-admin.vhosts file
   while read vhost_entry; do 
      let rank++

      vhost=( $(echo ${vhost_entry}) )
      ${PRINTF} "%-4s %-30s %-30s\n" ${rank} ${vhost[0]} ${vhost[1]} 
   done < ${wa_admin_vhosts}
}

# 
# wa_admin_add()
# Adds a new log file to be analyzed by webalizer
#

function wa_admin_add() {
   # get hostname and absolute logfile path
   vhost=( $@ )
   logfile=$( ${BASENAME} ${vhost[1]} )

   # check if the log file is already added to wa-admin
   ${GREP} -m 1 -E "^${vhost[0]} ${vhost[1]}" ${wa_admin_vhosts} 1> /dev/null 2>&1

   [ $? -eq 0 ] && errmsg "==>> LogFile ${vhost[1]} is already added for host ${vhost[0]}."

   [ ! -f ${vhost[1]} ] && errmsg "==>> LogFile ${vhost[1]} does not exists."

   # add the log file to wa-admin
   vhost_conf_dir=${wa_admin_doc_root}/${vhost[0]}/${logfile}

   ${MKDIR} -p ${vhost_conf_dir}

   ${CP} ${wa_admin_conf_template} ${vhost_conf_dir}/webalizer.conf
   ${SED} -i "" -e "s|@HOSTNAME@|${vhost[0]}|" \
	   -e "s|@LOGFILE@|${vhost[1]}|" \
	   -e "s|@OUTPUTDIR@|${vhost_conf_dir}|" \
	   -e "s|@DNSCACHE@|${wa_admin_doc_root}/${webalizer_dnscache}|" ${vhost_conf_dir}/webalizer.conf

   echo "${vhost[0]} ${vhost[1]} 0" >> ${wa_admin_vhosts}

   echo "==>> LogFile ${logfile} added for host ${vhost[0]}."
}
   
# 
# wa_admin_delete()
# Deletes a vhost entry from the wa-admin configuration
#

function wa_admin_delete() {

   # get the hostname and absolute logfile path
   vhost=( $@ )
   logfile=$( ${BASENAME} ${vhost[1]} )
   
   vhost_entry=$( ${GREP} -m 1 -E "^${vhost[0]} ${vhost[1]}" ${wa_admin_vhosts} )
 
   [ $? -ne 0 -o -z "${vhost_entry}" ] && errmsg "==>> LogFile ${logfile} for host ${vhost[0]} was not found."

   # remove the vhost directory from wa-admin
   vhost_conf_dir=${wa_admin_doc_root}/${vhost[0]}/${logfile}

   ${RM} -rf ${vhost_conf_dir}
   ${SED} -i "" -e "s|^${vhost_entry}$||" -e '/^$/d' ${wa_admin_vhosts}

   echo "==>> LogFile ${logfile} removed for host ${vhost[0]}."

   # update the graphs and re-create the index.html file
   wa_admin_run_cron
}

# 
# wa_admin_create_index()
# Creates index.html file for the added to wa-admin vhosts
#

function wa_admin_create_index() {
   
   # update the rank, yearly and daily stats
   update_rank_stats
   update_overview_graphs
 
   ${CAT} ${wa_admin_html_header} > ${wa_admin_doc_root}/index.html

   ${CAT} >> ${wa_admin_doc_root}/index.html << __EOF__
<strong>Index generated on $( ${DATE} "+%a %Y-%m-%d %H:%M %Z" )</strong>
<hr />
<center>
<strong>General overview of all Apache vhosts</strong><br /><br />
<strong>Monthly Stats for $( ${DATE} '+%B %Y' )</strong><br /><br />
<table>
   <tr>
	 <td align="center"><strong>Rank #</strong></td>   	 
	 <td align="center"><strong>Hostname</strong></td>
	 <td align="center"><strong>LogFile</strong></td>
	 <td align="center"><strong>Avg Daily Visits</strong></td>
	 <td align="center"><strong>Avg Daily Hits</strong></td>
	 <td align="center"><strong>Monthly Visits</strong></td>
	 <td align="center"><strong>Monthly Hits</strong></td>
   </tr>
__EOF__

   # initialize the total_stats array
   for i in $( ${JOT} - 1 10 ); do
      total_stats[${i}]=0
   done

   # vhost monthly rank by hits
   rank=0

   while read vhost_entry; do
      let rank++

      # get the vhost information
      vhost=( $(echo ${vhost_entry}) )
      logfile=$( ${BASENAME} ${vhost[1]} )

      # add the rank, hostname and log file to the index.html file
      ${CAT} >> ${wa_admin_doc_root}/index.html << __EOF__
<tr>
   <td><strong>${rank}</strong></td>
   <td><strong>${vhost[0]}</strong></td>
   <td><a href="${vhost[0]}/${logfile}">${logfile}</a></td>
__EOF__

      vhost_conf_dir=${wa_admin_doc_root}/${vhost[0]}/${logfile}

      # get the current month and year
      month_year=$( echo $( ${DATE} "+%m %Y" ) | ${SED} -e 's/^0*//' )

      # get the monthly stats from the history file of webalizer
      # monthly_stats[0] == month
      # monthly_stats[1] == year
      # monthly_stats[2] == monthly hits
      # monthly_stats[3] == monthly files
      # monthly_stats[4] == monthly sites
      # monthly_stats[5] == monthly kbytes
      # monthly_stats[6] == logfile first day
      # monthly_stats[7] == logfile last day
      # monthly_stats[8] == monthly pages
      # monthly_stats[9] == monthy visits
      monthly_stats=( $( ${GREP} -m 1 -E "^${month_year}" ${vhost_conf_dir}/${webalizer_hist} ) )

      # if we do not have stats for this month, zero the monthly stats array
      [ ${#monthly_stats[@]} -eq 0 ] && monthly_stats=( 0 0 0 0 0 0 0 0 0 0 )

      # get the total stats
      for i in $( ${JOT} - 0 9 ); do
	 let "total_stats[${i}] += ${monthly_stats[${i}]}"
      done

      # create the monthly stats hyper-link
      if [ ${monthly_stats[2]} -eq 0 ]
      then
	 monthly_stats_link="href=''"
      else
	 monthly_stats_link="href='${vhost[0]}/${logfile}/usage_$( ${DATE} +%Y%m ).html'"
      fi

      # add the monthly and daily stats to the index.html file
      ${CAT} >> ${wa_admin_doc_root}/index.html << __EOF__
   <td><strong><a ${monthly_stats_link}>$(( ${monthly_stats[9]} / (${monthly_stats[7]} - ${monthly_stats[6]} + 1) ))</a></strong></td>
   <td><strong><a ${monthly_stats_link}>$(( ${monthly_stats[2]} / (${monthly_stats[7]} - ${monthly_stats[6]} + 1) ))</a></strong></td>
   <td><strong><a ${monthly_stats_link}>${monthly_stats[9]}</a></strong></td>
   <td><strong><a ${monthly_stats_link}>${monthly_stats[2]}</a></strong></td>
</tr>
__EOF__
   done < ${wa_admin_vhosts}

   # add the totals at the end of the table
   ${CAT} >> ${wa_admin_doc_root}/index.html << __EOF__
<tr>
   <td><strong>Totals</strong></td>
   <td></td>
   <td></td>
   <td></td>
   <td></td>
   <td><strong>${total_stats[9]}</strong></td>
   <td><strong>${total_stats[2]}</strong></td>
</tr>
</table>
<br />
<strong>Yearly stats overview of all Apache vhosts for $( ${DATE} +%Y )</strong><br /><br />
<a href="yearly_stats.png"><img src="yearly_stats.png" width="640" height="480" /></a><br />
<a href="yearly_stats_totals.png"><img src="yearly_stats_totals.png" width="640" height="480" /></a><br />
</center>
<hr />
<strong>Index generated by ${wa_admin} -- version ${wa_admin_version}</strong>
__EOF__

   ${CAT} ${wa_admin_html_footer} >> ${wa_admin_doc_root}/index.html

   echo "==>> Index file was created in ${wa_admin_doc_root}/index.html"
}

# 
# wa_admin_run_cron
# Executes webalizer for each vhost
# Suitable for executing the function from cron(8) 
# in order to update all webalizer log files.
#

function wa_admin_run_cron() {
   
   echo "==>> Running wa-admin for all vhosts."

   while read vhost_entry; do
      vhost=( ${vhost_entry} )

      # execute webalizer for the vhost
      ${webalizer_bin} -c ${wa_admin_doc_root}/${vhost[0]}/$(${BASENAME} ${vhost[1]})/webalizer.conf
   done < ${wa_admin_vhosts}

   # generate the index.html file
   wa_admin_create_index
}

# 
# update_overview_graphs
# Creates overview graphs of the daily and yearly stats
# 

function update_overview_graphs() {

   # Start creating the yearly stats file
   echo "# Yearly stats file generated by ${wa_admin} -- version ${wa_admin_version}" > ${wa_admin_hist}
   ${PRINTF} "%s" Hostname >> ${wa_admin_hist}

   # vhosts count
   count=0

   # get the vhost hostnames and logfiles only once from the wa-admin.vhosts file
   while read vhost_entry; do
      # vhost_name[] stores all vhost hostnames
      # vhost_log[] stores all logfiles
      vhost_name[${count}]=$( echo ${vhost_entry} | ${CUT} -d ' ' -f 1 )
      vhost_log[${count}]=$( echo ${vhost_entry} | ${CUT} -d ' ' -f 2 )
      monthly_hits=$( echo ${vhost_entry} | ${CUT} -d ' ' -f 3 )

      vhost_conf_dir=${wa_admin_doc_root}/${vhost_name[${count}]}/$( ${BASENAME} ${vhost_log[${count}]} )

      ${PRINTF} " %s" ${vhost_name[${count}]} >> ${wa_admin_hist}

      let count++
   done < ${wa_admin_vhosts}

   # update the yearly stats
   year=$( ${DATE} +%Y )
   
   for i in $( ${JOT} - 1 12 ); do 
      
      ${PRINTF} "\n%d-%d" ${i} ${year} >> ${wa_admin_hist}
      
      # get the yearly stats for all vhosts
      for vhost_entry in $( ${JOT} - 0 $(( ${count} - 1 )) ); do
	 vhost_conf_dir=${wa_admin_doc_root}/${vhost_name[${vhost_entry}]}/$( ${BASENAME} ${vhost_log[${vhost_entry}]} )

	 # get the monthly hits
	 monthly_hits=$( ${GREP} -m 1 -E "^${i} ${year}" ${vhost_conf_dir}/${webalizer_hist} | ${CUT} -d ' ' -f 3 )
	 
	 # test the monthly_hits value for null string
	 [ -z ${monthly_hits} ] && monthly_hits=0

	 # store the total hits per month of all vhost
	 let "total_hits_per_month[$(( ${i} - 1 ))] += ${monthly_hits}"

	 ${PRINTF} " %d" ${monthly_hits} >> ${wa_admin_hist}
      done
   done

   echo -e "\n# Yearly stats file generated on $( ${DATE} +%Y/%m/%d ) at $( ${DATE} +%H:%M:%S )" >> ${wa_admin_hist}

   # find the max total hits for the year
   max_totals_month=${total_hits_per_month[0]}
   for i in $( ${JOT} - 1 10 ); do
      [ ${total_hits_per_month[${i}]} -gt ${max_totals_month} ] && max_totals_month=${total_hits_per_month[${i}]}
   done

   max_totals_month=$( echo "scale=2; ( ${max_totals_month} + ( ${max_totals_month} * 0.15 ) )" | ${BC} -l )
      
   # generate the graphs
   ${GNUPLOT} << __EOF__
# Yearly stats graph 
set terminal png font '${wa_admin_font_path}, ${wa_admin_font_size}' size ${wa_admin_stats_size}
set output '${wa_admin_doc_root}/yearly_stats.png'
set title "Yearly Overview for $( ${DATE} +%Y )"
set xrange [-0.5:11.5]
set autoscale 
set style data histogram
set style histogram cluster gap 1
set style fill solid border -1
set boxwidth 0.9
set boxwidth 0.9
set xtics rotate by -45 nomirror
set xtics ("Jan" 0, "Feb" 1, "Mar" 2, "Apr" 3, "May" 4, "Jun" 5, "Jul" 6, "Aug" 7, "Sep" 8, "Oct" 9, "Nov" 10, "Dec" 11) 
set key under box
set xlabel "Month"
set ylabel "Hits per Month"
set grid y
plot '${wa_admin_hist}' using 2 title columnheader(2), \
	for [i=3:$(( ${count} + 1 ))] '' using i title columnheader(i)

# Yearly stats graph with totals 
set yrange [0:${max_totals_month}]
set title "Yearly Overview for $( ${DATE} +%Y ) with totals"
set output '${wa_admin_doc_root}/yearly_stats_totals.png'
set style histogram rows
set style fill solid border -1
plot '${wa_admin_hist}' using 2 title columnheader(2), \
	for [i=3:$(( ${count} + 1 ))] '' using i title columnheader(i)
__EOF__
}

# 
# update_rank_stats
# Updates the monthly hits for each vhost and sorts them by rank
#

function update_rank_stats() {

   while read vhost_entry; do
      # get the vhost information
      vhost=( $(echo ${vhost_entry}) )
      logfile=$( ${BASENAME} ${vhost[1]} )

      vhost_conf_dir=${wa_admin_doc_root}/${vhost[0]}/${logfile}

      # get the current month and year
      month_year=$( echo $( ${DATE} "+%m %Y" ) | ${SED} -e 's/^0*//' )

      # get the monthly hits
      monthly_hits=( $( ${GREP} -m 1 -E "^${month_year}" ${vhost_conf_dir}/${webalizer_hist} | ${CUT} -d ' ' -f 3 ) )

      # if we do not have stats for this month, zero the monthly_hits variable
      [ -z "${monthly_hits}" ] && monthly_hits=0

      # update the wa-admin.vhosts file with the new monthly hits
      # ${vhost[2]} stores the old monthly hits
      ${SED} -i "" -e "s|^${vhost[0]} ${vhost[1]} ${vhost[2]}|${vhost[0]} ${vhost[1]} ${monthly_hits}|" ${wa_admin_vhosts}
   done < ${wa_admin_vhosts}

   # sort the updated wa-admin.vhosts file by monthly hits
   ${SORT} -nrk 3 -o ${wa_admin_vhosts} ${wa_admin_vhosts}
}

# 
# End of function definitions
#

# 
# main
#

[ $# -eq 0 ] && errmsg ${wa_admin_usage}

# perform a sanity check
sanity_check

case "$1" in 
   list)
      [ $# -eq 1 ] && wa_admin_list || errmsg ${wa_admin_usage_list}
      ;;
   create-index)
      [ $# -eq 1 ] && wa_admin_create_index || errmsg ${wa_admin_usage_create_index}
      ;;
   run-cron)
      [ $# -eq 1 ] && wa_admin_run_cron || errmsg ${wa_admin_usage_run_cron}
      ;;
   add)
      [ $# -eq 3 ] && wa_admin_add $2 $3 || errmsg ${wa_admin_usage_add}
      ;;
   delete)
      [ $# -eq 3 ] && wa_admin_delete $2 $3 || errmsg ${wa_admin_usage_delete}
      ;;
   help) 
      [ $# -ne 2 ] && errmsg ${wa_admin_usage}
      case "$2" in
	 list) 
	    errmsg ${wa_admin_usage_list}
	    ;;
	 create-index) 
	    errmsg ${wa_admin_usage_create_index}
	    ;;
	 run-cron)
	    errmsg ${wa_admin_usage_run_cron}
	    ;;
	 add)
	    errmsg ${wa_admin_usage_add}
	    ;;
	 delete)
	    errmsg ${wa_admin_usage_delete}
	    ;;
	 *)
	    errmsg ${wa_admin_usage}
	    ;;
      esac
      ;;
   *)
      errmsg ${wa_admin_usage}
      ;;
esac

exit 0

